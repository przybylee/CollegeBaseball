#First we do a simple regression using skill only:
val_names <- c("team", "skill", "point_won_by")
df_points <- px[!is.na(px$skill),val_names]
head(df_points)
df_points$point <- ifelse(df_points$team == df_points$point_won_by, 1, 0)
unique(df_points$f_skill)
df_points$f_skill <- as.factor(df_points$skill)
unique(df_points$f_skill)
unique(df_points$skill)
df_points <- df_points[df_points$skill %in% skills,]
skills <- c("Attack", "Block", "Dig", "Freeball", "Reception", "Serve", "Set", "Dig")
df_points <- df_points[df_points$skill %in% skills,]
table(df_points$f_skill)
skills <- c("Attack", "Block", "Dig", "Freeball", "Reception", "Serve", "Set", "Dig")
df_points <- df_points[df_points$skill %in% skills,]
#First we do a simple regression using skill only:
val_names <- c("team", "skill", "point_won_by")
df_points <- px[!is.na(px$skill),val_names]
head(df_points)
df_points$point <- ifelse(df_points$team == df_points$point_won_by, 1, 0)
unique(df_points$skill)
skills <- c("Attack", "Block", "Dig", "Freeball", "Reception", "Serve", "Set", "Dig")
df_points <- df_points[df_points$skill %in% skills,]
df_points$f_skill <- as.factor(df_points$skill)
table(df_points$f_skill)
table(df_points$f_skill, df_points$point)
summary(df_points)
glm.skill <- glm(point ~ 0 + f_skill, family = binomial(link = logit), data = df_points)
summary(glm.skill)
#We don't need this for confidence intervals since inverse link function is increasing
beta <- coefficients(glm.skill)
logistic <- function(x){
exp(x)/(1+exp(x))
}
#x <- -10:10
#y <- logistic(x)
#plot(x,y, type = "l")
mu <- logistic(beta)
mu
ints <- confint(glm.skill, level = 0.95)
logistic(ints)
ints <- cbind(mu, logistic(ints))
skill_means <- data.frame(ints)
names(skill_means) <- c("win_prob", "lower", "upper")
skill <- sort(unique(df_points$skill))
skill_means <- cbind(skill, skill_means)
skill_means
#Plot means with error bars
ggplot(skill_means) +
geom_bar( aes(x=skill, y=win_prob), stat="identity", fill="skyblue", alpha=0.7)+
geom_errorbar( aes(x=skill, ymin=lower, ymax=upper), width=0.4, colour="orange", alpha=0.9, size=1.3)+
labs(title = "Skills only Model", x = "Skill", y = "Win Probability")
#Are these win probabilities sensitive to the team?
df_pts_by_tm <- df_points
df_pts_by_tm$f_team <- as.factor(df_pts_by_tm$team)
head(df_pts_by_tm)
summary(df_pts_by_tm)
glm.skill_tm <- glm(point ~ 0 + f_skill*f_team, family = binomial(link = logit), data = df_pts_by_tm)
summary(glm.skill_tm)
anova(glm.skill_tm)
#Loglikelihood ratio test
kr <- 5
pf <- length(unique(df_pts_by_tm$team))
kf <- kr + pf+ kr*pf
kf
chisq <- -2*(logLik(glm.skill) - logLik(glm.skill_tm))
chisq
kf-kr
pchisq(195, df= kf-kr)
pchisq(195, df= kf-kr, lower.tail = F)
AIC(glm.skill)
AIC(glm.skill_tm)
mu
plays[5000:5040,]
#get variables of interest for each play
names(px)
val_names2 <- c("team", "skill", "skill_type", "start_zone", "end_zone", "skill_subtype", "team_touch_id"
"point_won_by", "home_team_score", "visiting_team_score", "winning_attack")
plays <- px[,val_names2]
plays[5000:5040,]
val_names2 <- c("team", "skill", "skill_type", "start_zone", "end_zone", "skill_subtype", "team_touch_id",
"point_won_by", "home_team_score", "visiting_team_score", "winning_attack")
plays <- px[,val_names2]
plays[5000:5040,]
#get variables of interest for each play
names(px)
pchisq(195, df= kf-kr, lower.tail = F)
glm.skill_tm <- glm(point ~ 0 + f_skill:f_team, family = binomial(link = logit), data = df_pts_by_tm)
summary(glm.skill_tm)
anova(glm.skill_tm)
#Loglikelihood ratio test
kr <- 5
kf <- kr*pf
chisq <- -2*(logLik(glm.skill) - logLik(glm.skill_tm))
chisq
pchisq(195, df= kf-kr, lower.tail = F)
summary(glm.skill_tm)
beta
mu
library(xtable)
anova(glm.skill_tm)
anova(glm.skill_tm, glm.skill)
anova(glm.skill, glm.skill_tm)
table(df_points$f_skill)
table(df_points$f_skill, df_points$point)
glm.skill <- glm(point ~ 0 + f_skill, family = binomial(link = logit), data = df_points)
summary(glm.skill)
#x <- -10:10
#y <- logistic(x)
#plot(x,y, type = "l")
mu <- logistic(beta)
ints <- confint(glm.skill, level = 0.95)
logistic(ints)
ints <- cbind(mu, logistic(ints))
skill_means <- data.frame(ints)
names(skill_means) <- c("win_prob", "lower", "upper")
skill <- sort(unique(df_points$skill))
skill_means <- cbind(skill, skill_means)
xtable(skill_means)
row.names(skill_means) <- NULL
xtable(skill_means)
xtable(skill_means, digits = 4)
pf
#Are these win probabilities sensitive to the team?
df_pts_by_tm <- df_points
df_pts_by_tm$f_team <- as.factor(df_pts_by_tm$team)
head(df_pts_by_tm)
#Are these win probabilities sensitive to the team?
df_pts_by_tm <- df_points
df_pts_by_tm$f_team <- as.factor(df_pts_by_tm$team)
glm.skill_tm <- glm(point ~ 0 + f_skill:f_team, family = binomial(link = logit), data = df_pts_by_tm)
#Loglikelihood ratio test
kr <- 5
pf <- length(unique(df_pts_by_tm$team))
kf <- kr*pf
chisq <- -2*(logLik(glm.skill) - logLik(glm.skill_tm))
chisq
pchisq(195, df= kf-kr, lower.tail = F)
kf-kr
wd <- getwd()
d <- dir(wd, pattern = "dvw$", full.names = TRUE)
#For some reason the 9th match does not read
d <- d[c(1:8,10:16)]
## if your files are in nested directories, add 'recursive = TRUE' to the arguments
#Combine all of the dvw files into one playbyplay data set
lx <- list()
## read each file
for (fi in seq_along(d)) lx[[fi]] <- dv_read(d[fi])
## now extract the play-by-play component from each and bind them together
px <- list()
for (fi in seq_along(lx)) px[[fi]] <- plays(lx[[fi]])
px <- do.call(rbind, px)
#The majority of the plays in the plays df are attacks
names(plays)
#The majority of the plays in the plays df are attacks
names(px)
val_names1 <- c("team", "skill", "skill_type", "evaluation", "start_zone", "end_zone", "skill_subtype",
"attack_phase", "point_won_by", "phase")
plays <- px[,val_names1]
plays[6050:5090,]
?dv_read
## if your files are in nested directories, add 'recursive = TRUE' to the arguments
#Combine all of the dvw files into one playbyplay data set
lx <- list()
## read each file
for (fi in seq_along(d)) lx[[fi]] <- dv_read(d[fi], insert_technical_timeouts = FALSE)
## now extract the play-by-play component from each and bind them together
px <- list()
for (fi in seq_along(lx)) px[[fi]] <- plays(lx[[fi]])
px <- do.call(rbind, px)
#get variables of interest for each play
names(px)
val_names1 <- c("team", "skill", "skill_type", "evaluation", "start_zone", "end_zone", "skill_subtype",
"attack_phase", "point_won_by", "phase")
plays <- px[,val_names1]
plays[6050:5090,]
plays[6050:5090,]
plays[6050:6090,]
val_names1 <- c("team", "skill", "skill_type", "evaluation", "start_zone", "end_zone", "skill_subtype",
"attack_phase", "point_won_by")
plays <- px[,val_names1]
plays[6050:6090,]
attacks <- plays[plays$skill == "Attack",]
sum(is.na(attacks$start_zone))
View(attacks)
attacks <- attacks[!is.na(attacks$team),]
sum(is.na(attacks$start_zone))
View(attacks)
#First we do a simple regression using skill only:
val_names <- c("team", "skill", "start_zone", "point_won_by")
df_points <- px[!is.na(px$skill),val_names]
head(df_points)
df_points$point <- ifelse(df_points$team == df_points$point_won_by, 1, 0)
unique(df_points$skill)
skills <- c("Attack", "Block", "Dig", "Freeball", "Reception", "Serve", "Set", "Dig")
df_points <- df_points[df_points$skill %in% skills,]
df_points$skill <- as.factor(df_points$skill)
#First we do a simple regression using skill only:
val_names <- c("team", "skill", "start_zone", "point_won_by")
df_points <- px[!is.na(px$skill),val_names]
head(df_points)
df_points$point <- ifelse(df_points$team == df_points$point_won_by, 1, 0)
unique(df_points$skill)
skills <- c("Attack", "Block", "Dig", "Freeball", "Reception", "Serve", "Set", "Dig")
df_points <- df_points[df_points$skill %in% skills,]
df_points$f_skill <- as.factor(df_points$skill)
head(df_points)
df_points <- df_points[df_points$skill != "Attack" | !is.na(df_points$start_zone),]
#First we do a simple regression using skill only:
val_names <- c("team", "skill", "start_zone", "point_won_by")
df_points <- px[!is.na(px$skill),val_names]
head(df_points)
df_points$point <- ifelse(df_points$team == df_points$point_won_by, 1, 0)
unique(df_points$skill)
#First we do a simple regression using skill only:
val_names <- c("team", "skill", "start_zone", "point_won_by")
df_points <- px[!is.na(px$skill),val_names]
df_points$point <- ifelse(df_points$team == df_points$point_won_by, 1, 0)
unique(df_points$skill)
skills <- c("Attack", "Block", "Dig", "Freeball", "Reception", "Serve", "Set", "Dig")
df_points <- df_points[df_points$skill %in% skills,]
df_points$f_skill <- as.factor(df_points$skill)
df_points <- df_points[df_points$skill != "Attack" | !is.na(df_points$start_zone),]
table(df_points$f_skill)
table(df_points$f_skill, df_points$point)
summary(df_points)
df_points$f_skill.loc1 <- df_points$f_skill
df_points$f_skill.loc1[df_points$skill == "Attack"] <- as.factor(paste("Attack", df_points$start_zone))
#First we do a simple regression using skill only:
val_names <- c("team", "skill", "start_zone", "point_won_by")
df_points <- px[!is.na(px$skill),val_names]
head(df_points)
df_points$point <- ifelse(df_points$team == df_points$point_won_by, 1, 0)
unique(df_points$skill)
skills <- c("Attack", "Block", "Dig", "Freeball", "Reception", "Serve", "Set", "Dig")
df_points <- df_points[df_points$skill %in% skills,]
df_points$f_skill <- as.factor(df_points$skill)
df_points <- df_points[df_points$skill != "Attack" | !is.na(df_points$start_zone),]
df_points <- df_points[df_points$skill != "Attack" | !is.na(df_points$start_zone),]
table(df_points$f_skill)
table(df_points$f_skill, df_points$point)
#First we do a simple regression using skill only:
val_names <- c("team", "skill", "start_zone", "point_won_by")
df_points <- px[!is.na(px$skill),val_names]
head(df_points)
df_points$point <- ifelse(df_points$team == df_points$point_won_by, 1, 0)
skills <- c("Attack", "Block", "Dig", "Freeball", "Reception", "Serve", "Set", "Dig")
df_points <- df_points[df_points$skill %in% skills,]
unique(df_points$skill)
df_points$f_skill <- as.factor(df_points$skill)
df_points <- df_points[df_points$skill != "Attack" | !is.na(df_points$start_zone),]
table(df_points$f_skill)
table(df_points$f_skill, df_points$point)
summary(df_points)
df_points$start_zone[is.na(df_points$start_zone)] <- 0
df_points$f_skill.loc1 <- as.factor(paste(df_points$f_skill, df_points$start_zone))
glm.skill <- glm(point ~ 0 + f_skill, family = binomial(link = logit), data = df_points)
summary(glm.skill)
beta <- coefficients(glm.skill)
logistic <- function(x){
exp(x)/(1+exp(x))
}
#x <- -10:10
#y <- logistic(x)
#plot(x,y, type = "l")
mu <- logistic(beta)
ints <- confint(glm.skill, level = 0.95)
logistic(ints)
ints <- cbind(mu, logistic(ints))
skill_means <- data.frame(ints)
names(skill_means) <- c("win_prob", "lower", "upper")
skill <- sort(unique(df_points$skill))
skill_means <- cbind(skill, skill_means)
row.names(skill_means) <- NULL
xtable(skill_means, digits = 4)
#Now fit the model with the locations
names(df_points)
head(df_points)
df_points$f_skill.loc1 <- as.factor(paste(df_points$f_skill, df_points$start_zone, sep = ""))
head(df_points)
glm.skill.loc1 <- glm(point ~ 0 + f_skill.loc1, family = binomial(link = logit), data = df_points)
summary(glm.skill)
summary(glm.skill.loc1)
#First we do a simple regression using skill only:
val_names <- c("team", "skill", "start_zone", "point_won_by")
df_points <- px[!is.na(px$skill),val_names]
head(df_points)
df_points$point <- ifelse(df_points$team == df_points$point_won_by, 1, 0)
unique(df_points$skill)
skills <- c("Attack", "Block", "Dig", "Freeball", "Reception", "Serve", "Set", "Dig")
df_points <- df_points[df_points$skill %in% skills,]
df_points$f_skill <- as.factor(df_points$skill)
df_points <- df_points[df_points$skill != "Attack" | !is.na(df_points$start_zone),]
table(df_points$f_skill)
table(df_points$f_skill, df_points$point)
summary(df_points)
df_points$start_zone[is.na(df_points$start_zone)] <- 0
df_pointsstart_zone[df_points$skill != "Attack"] <- 0
df_points$start_zone[df_points$skill != "Attack"] <- 0
summary(df_points)
df_points$f_skill.loc1 <- as.factor(paste(df_points$f_skill, df_points$start_zone, sep = ""))
head(df_points)
summary(df_points)
unique(df_points$f_skill.loc1)
glm.skill <- glm(point ~ 0 + f_skill, family = binomial(link = logit), data = df_points)
summary(glm.skill)
####################
#Now fit the model with the locations
names(df_points)
head(df_points)
summary(df_points)
unique(df_points$f_skill.loc1)
glm.skill.loc1 <- glm(point ~ 0 + f_skill.loc1, family = binomial(link = logit), data = df_points)
summary(glm.skill.loc1)
beta <- coefficients(glm.skill.loc1)
mu <- logistic(beta)
ints <- confint(glm.skill, level = 0.95)
logistic(ints)
ints <- confint(glm.skill.loc1, level = 0.95)
logistic(ints)
ints <- cbind(mu, logistic(ints))
skill_means <- data.frame(ints)
names(skill_means) <- c("win_prob", "lower", "upper")
skill <- sort(unique(df_points$skill))
skill_means <- cbind(skill, skill_means)
skill <- sort(unique(df_points$f_skill.loc1))
skill_means <- cbind(skill, skill_means)
row.names(skill_means) <- NULL
xtable(skill_means, digits = 4)
#Plot means with error bars
ggplot(skill_means) +
geom_bar( aes(x=skill, y=win_prob), stat="identity", fill="skyblue", alpha=0.7)+
geom_errorbar( aes(x=skill, ymin=lower, ymax=upper), width=0.4, colour="orange", alpha=0.9, size=1.3)+
labs(title = "Skills only Model", x = "Skill", y = "Win Probability")
#Plot means with error bars
ggplot(skill_means) +
geom_bar( aes(x=skill, y=win_prob), stat="identity", fill="skyblue", alpha=0.7)+
geom_errorbar( aes(x=skill, ymin=lower, ymax=upper), width=0.4, colour="orange", alpha=0.9, size=1.3)+
labs(title = "Attack Locations Model", x = "Skill", y = "Win Probability")
table(df_points$f_skill.loc1, df_points$point)
xtable(table(df_points$f_skill.loc1, df_points$point))
#Plot means with error bars
ggplot(skill_means) +
geom_bar( aes(x=skill, y=win_prob), stat="identity", fill="skyblue", alpha=0.7)+
geom_errorbar( aes(x=skill, ymin=lower, ymax=upper), width=0.4, colour="orange", alpha=0.9, size=1.3)+
labs(title = "Attack Locations Model", x = "Skill", y = "Win Probability")
xtable(table(df_points$f_skill.loc1, df_points$point))
xtable(skill_means, digits = 4)
#Likelihood Ratio test for Attack Location Model
kf <- length(coefficients(glm.skill.loc1))
kf
kr <- length(coefficients(glm.skill))
M <- anova(glm.skill, glm.skill.loc1)
M
logLik(glm.skill)
logLik(glm.skill.loc1)
2*10.6
M$Deviance
chisq <- M$Deviance[2]
pchisq(chisq, df = kf -kr)
pchisq(chisq, df = kf -kr, lower.tail = T)
pchisq(chisq, df = kf -kr, lower.tail = F)
#Are these win probabilities sensitive to the team?
df_pts_by_tm <- df_points
df_pts_by_tm$f_team <- as.factor(df_pts_by_tm$team)
head(df_pts_by_tm)
summary(df_pts_by_tm)
glm.skill_tm <- glm(point ~ 0 + f_skill.loc1:f_team, family = binomial(link = logit), data = df_pts_by_tm)
summary(glm.skill_tm)
#Loglikelihood ratio test
kr <- length(coefficients(glm.skill.loc1))
kf <- length(coefficients(glm.skill_tm))
anova(glm.skill, glm.skill_tm)
pchisq(277.13, df= kf-kr, lower.tail = F)
kf-kr
View(px)
unique(px$point_phase)
unique(px$attack_phase)
plays[6050:6090,]
plays[6050:6090,]
plays[6050:6093,]
unique(px$phase)
unique(px$attack_phase)
setwd("C:/Users/Lee/Box/Iowa State/Baseball/CSL Project 2019/DI_LeagueComparisons")
library(ggplot2)
#write.table(d.comps, "comps_PlyrEffReg_7-28-20.csv", sep = ",")
dcomps <- read.csv(d.comps, "comps_PlyrEffReg_7-28-20.csv", header = T, sep = ",")
#write.table(d.comps, "comps_PlyrEffReg_7-28-20.csv", sep = ",")
dcomps <- read.csv("comps_PlyrEffReg_7-28-20.csv", header = T, sep = ",")
setwd("C:/Users/Lee/Box/Iowa State/Baseball/CSL Project 2019/DI_LeagueComparisons/ComparisonsWithMLB")
#write.table(d.comps, "comps_PlyrEffReg_7-28-20.csv", sep = ",")
dcomps <- read.csv("comps_PlyrEffReg_7-28-20.csv", header = T, sep = ",")
summary(dcomps)
library(ggplot2)
LEplot <- ggplot(d.comps, aes(x = YR, y = lg.diff, color = LG)) +
geom_line()
LEplot <- LEplot+labs(title = "League Effects on OPS", x = "Year", y = "Difference from NL 1976 OPS")+
scale_x_continuous(breaks=seq(1870, 2020, 10))
LEplot + scale_y_continuous(breaks=seq(-0.2, 0.4, 0.05))+
geom_vline(xintercept = 1884, linetype="dotted", color = "black", size=1)+
geom_vline(xintercept = 1889, linetype="dotted", color = "black", size=1)+
geom_vline(xintercept = 1901, linetype="dotted", color = "red", size=1)+
geom_vline(xintercept = 1903, linetype="dotted", color = "blue", size=1)+
geom_vline(xintercept = 1893, linetype="dotted", color = "black", size=1)+
geom_vline(xintercept = 1969, linetype="dotted", color = "black", size=1)
#write.table(d.comps, "comps_PlyrEffReg_7-28-20.csv", sep = ",")
d.comps <- read.csv("comps_PlyrEffReg_7-28-20.csv", header = T, sep = ",")
library(ggplot2)
LEplot <- ggplot(d.comps, aes(x = YR, y = lg.diff, color = LG)) +
geom_line()
LEplot <- LEplot+labs(title = "League Effects on OPS", x = "Year", y = "Difference from NL 1976 OPS")+
scale_x_continuous(breaks=seq(1870, 2020, 10))
LEplot + scale_y_continuous(breaks=seq(-0.2, 0.4, 0.05))+
geom_vline(xintercept = 1884, linetype="dotted", color = "black", size=1)+
geom_vline(xintercept = 1889, linetype="dotted", color = "black", size=1)+
geom_vline(xintercept = 1901, linetype="dotted", color = "red", size=1)+
geom_vline(xintercept = 1903, linetype="dotted", color = "blue", size=1)+
geom_vline(xintercept = 1893, linetype="dotted", color = "black", size=1)+
geom_vline(xintercept = 1969, linetype="dotted", color = "black", size=1)
LEplot <- ggplot(d.comps, aes(x = YR, y = lg.diff, color = LG)) +
geom_line()
LEplot <- LEplot+labs(title = "League Effects on OPS", x = "Year", y = "Difference from NL 1976 OPS")+
scale_x_continuous(breaks=seq(1870, 2020, 10))
LEplot
head(d.comps)
View(d.comps)
d.comps$LG[is.na(d.comps$LG)]<- "NA"
summary(d.comps)
View(d.comps)
d.comps$LG[is.na(d.comps$LG)]<- "N.A."
d.comps$LG <- as.character(d.comps$LG)
d.comps$LG[is.na(d.comps$LG)]<- "NA"
d.comps$LG <- factor(d.comps$LG)
summary(d.comps)
LEplot <- ggplot(d.comps, aes(x = YR, y = hitting_lg_ef, color = LG)) +
geom_line()
LEplot <- LEplot+labs(title = "League Effects on OPS", x = "Year", y = "Difference from NL 1976 OPS")+
scale_x_continuous(breaks=seq(1870, 2020, 10))
LEplot + scale_y_continuous(breaks=seq(-0.2, 0.4, 0.05))+
geom_vline(xintercept = 1884, linetype="dotted", color = "black", size=1)+
geom_vline(xintercept = 1889, linetype="dotted", color = "black", size=1)+
geom_vline(xintercept = 1901, linetype="dotted", color = "red", size=1)+
geom_vline(xintercept = 1903, linetype="dotted", color = "blue", size=1)+
geom_vline(xintercept = 1893, linetype="dotted", color = "black", size=1)+
geom_vline(xintercept = 1969, linetype="dotted", color = "black", size=1)
ggplot(d.comps, aes(x = YR, y = hitting_lg_ef, color = LG)) +
geom_line()
LEplot <- ggplot(d.comps, aes(x = YR, y = hitting_lg_eff, color = LG)) +
geom_line()
LEplot
LEplot <- LEplot+labs(title = "League Effects on OPS", x = "Year", y = "Difference from NL 1976 OPS")+
scale_x_continuous(breaks=seq(1870, 2020, 10))
LEplot + scale_y_continuous(breaks=seq(-0.2, 0.4, 0.05))+
geom_vline(xintercept = 1884, linetype="dotted", color = "black", size=1)+
geom_vline(xintercept = 1889, linetype="dotted", color = "black", size=1)+
geom_vline(xintercept = 1901, linetype="dotted", color = "red", size=1)+
geom_vline(xintercept = 1903, linetype="dotted", color = "blue", size=1)+
geom_vline(xintercept = 1893, linetype="dotted", color = "black", size=1)+
geom_vline(xintercept = 1969, linetype="dotted", color = "black", size=1)
HAplot <- ggplot(d.comps, aes(x = YR, y = tal.diff, color = LG)) +
geom_line()
summary(d.comps)
HAplot <- ggplot(d.comps, aes(x = YR, y = hitting_talent, color = LG)) +
geom_line() +
geom_point(aes(shape=signHA, size = signHA))+scale_shape_manual(values=c(20,8))+scale_size_manual(values=c(1,2))
HAplot <- HAplot+labs(title = "Average Hitting Ability", x = "Year", y = "Difference from NL 2018 OPS")
HAplot + scale_y_continuous(breaks = seq(-0.4,0.2,0.05))+scale_x_continuous(breaks=seq(1870, 2020, 10))+
geom_vline(xintercept = 1961, linetype="dotted", color = "blue", size=1)+
geom_vline(xintercept = 1969, linetype="dotted", color = "blue", size=1)+
geom_vline(xintercept = 1977, linetype="dotted", color = "blue", size=1)+
geom_vline(xintercept = 1998, linetype="dotted", color = "blue", size=1)+
geom_vline(xintercept = 1892, linetype="dotted", color = "red", size=1)+
geom_vline(xintercept = 1900, linetype="dotted", color = "red", size=1)+
geom_vline(xintercept = 1962, linetype="dotted", color = "red", size=1)+
geom_vline(xintercept = 1969, linetype="dotted", color = "red", size=1)+
geom_vline(xintercept = 1977, linetype="dotted", color = "red", size=1)+
geom_vline(xintercept = 1998, linetype="dotted", color = "red", size=1)+
geom_vline(xintercept = 1973, linetype="dotted", color = "blue", size=1)
HAplot <- ggplot(d.comps, aes(x = YR, y = hitting_talent, color = LG)) +
geom_line() +
geom_point(aes(shape=tal_ssn_diff, size = tal_ssn_diff))+scale_shape_manual(values=c(20,8))+scale_size_manual(values=c(1,2))
HAplot <- HAplot+labs(title = "Average Hitting Ability", x = "Year", y = "Difference from NL 2018 OPS")
HAplot + scale_y_continuous(breaks = seq(-0.4,0.2,0.05))+scale_x_continuous(breaks=seq(1870, 2020, 10))+
geom_vline(xintercept = 1961, linetype="dotted", color = "blue", size=1)+
geom_vline(xintercept = 1969, linetype="dotted", color = "blue", size=1)+
geom_vline(xintercept = 1977, linetype="dotted", color = "blue", size=1)+
geom_vline(xintercept = 1998, linetype="dotted", color = "blue", size=1)+
geom_vline(xintercept = 1892, linetype="dotted", color = "red", size=1)+
geom_vline(xintercept = 1900, linetype="dotted", color = "red", size=1)+
geom_vline(xintercept = 1962, linetype="dotted", color = "red", size=1)+
geom_vline(xintercept = 1969, linetype="dotted", color = "red", size=1)+
geom_vline(xintercept = 1977, linetype="dotted", color = "red", size=1)+
geom_vline(xintercept = 1998, linetype="dotted", color = "red", size=1)+
geom_vline(xintercept = 1973, linetype="dotted", color = "blue", size=1)
setwd("C:/Users/Lee/Git Repos/CollegeBaseball/ComparisonsWithMLB")
library(Lahman)
#library(vistime)
library(plyr)
library(Lahman)
#library(vistime)
library(plyr)
library(MASS)
library(nlme)
library(igraph)
library(lme4)
hitters <- Batting
hitters$YR <- hitters$yearID
#Count each season for each hitter
ssns.all <- ddply(hitters, .(playerID), season.tab)
source("CompFunctions.R")
#Count each season for each hitter
ssns.all <- ddply(hitters, .(playerID), season.tab)
